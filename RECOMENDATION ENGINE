package internshipTasks;


	import org.apache.mahout.cf.taste.common.TasteException;
	import org.apache.mahout.cf.taste.impl.model.file.FileDataModel;
	import org.apache.mahout.cf.taste.impl.neighborhood.ThresholdUserNeighborhood;
	import org.apache.mahout.cf.taste.impl.recommender.GenericUserBasedRecommender;
	import org.apache.mahout.cf.taste.impl.similarity.PearsonCorrelationSimilarity;
	import org.apache.mahout.cf.taste.model.DataModel;
	import org.apache.mahout.cf.taste.neighborhood.UserNeighborhood;
	import org.apache.mahout.cf.taste.recommender.RecommendedItem;
	import org.apache.mahout.cf.taste.recommender.UserBasedRecommender;
	import apache.mahout.cf.taste.similarity.UserSimilarity;

	import java.io.File;
	import java.io.IOException;
	import java.util.List;

	public class RecommendationEngine {

	    public static void main(String[] args) {
	        try {
	            // Load the data from the CSV file
	            DataModel model = new FileDataModel(new File("user_item_data.csv"));

	            // Define the similarity algorithm (Pearson Correlation in this case)
	            UserSimilarity similarity = new PearsonCorrelationSimilarity(model);

	            // Define the neighborhood (users with similarity above a threshold)
	            UserNeighborhood neighborhood = new ThresholdUserNeighborhood(0.1, similarity, model);

	            // Create the recommender
	            UserBasedRecommender recommender = new GenericUserBasedRecommender(model, neighborhood, similarity);

	            // Generate recommendations for a user (e.g., user with ID 1)
	            List<RecommendedItem> recommendations = recommender.recommend(1, 3); // Recommend 3 items for user 1

	            // Print the recommendations
	            System.out.println("Recommendations for User 1:");
	            for (RecommendedItem recommendation : recommendations) {
	                System.out.println("Item ID: " + recommendation.getItemID() + " | Estimated Preference: " + recommendation.getValue());
	            }

	        } catch (IOException | TasteException e) {
	            e.printStackTrace();
	        }
	    }
	}
